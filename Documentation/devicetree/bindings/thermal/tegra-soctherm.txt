Tegra124 SOCTHERM thermal management system

The SOCTHERM IP block contains thermal sensors, support for polled
or interrupt-based thermal monitoring, CPU and GPU throttling based
on temperature trip points, and handling external overcurrent
notifications. It is also used to manage emergency shutdown in an
overheating situation.

Required properties :
- compatible : "nvidia,tegra124-soctherm", "nvidia,tegra132-soctherm"
  or "nvidia,tegra210-soctherm".
- reg : Should contain at least 2 entry:
  - SOCTHERM register set
  - Tegra CAR register set
  - CCROC register set for Tegra132
- reg-names : Must inclue the following entries:
  - soctherm-reg
  - car-reg
  - ccroc-reg (this is for Tegra132)
- interrupts : Defines the interrupt used by SOCTHERM
- clocks : Must contain an entry for each entry in clock-names.
  See ../clocks/clock-bindings.txt for details.
- clock-names : Must include the following entries:
  - tsensor
  - soctherm
- resets : Must contain an entry for each entry in reset-names.
  See ../reset/reset.txt for details.
- reset-names : Must include the following entries:
  - soctherm
- #thermal-sensor-cells : Should be 1. See ./thermal.txt for a description
    of this property. See <dt-bindings/thermal/tegra124-soctherm.h> for a
    list of valid values when referring to thermal sensors.
- throttle-cfgs: A sub-node which is a container of throttle configs.
- hw-trips : A sub-node which is a container of sensor group.

* throttle-cfgs
* throttle-control:
These node is used to describe the HW throttle info, named as
"light", "heavy", "oc1", "oc2", "oc3", "oc4", "oc5".
"light"/"heavy" correspond to soctherm internal alarm/interrupt event.
"oc1" to "oc5" correspond to specific pins, which connect to the chip.

Required properties:
- priority: Each throttles has its own throttle settings, so the SW need
    to set priorities for various throttle, the HW arbiter can select the
    final throttle settings.
    Bigger value indicates higher priority, In general, higher priority
    translates to lower target frequency. SW needs to ensure that critical
    thermal/OC alarms are given higher priority, and ensure that there is
    no race if priority of two vectors is set to the same value.
- cpu-throt-level: Level of pulse skippers, which used to throttle
    clock frequencies. It indicates cpu clock throttling depth, and
    the depth can be programmed. This property is only for Tegra132.
    Must set as following values:
    TEGRA_SOCTHERM_THROT_LEVEL_LOW, TEGRA_SOCTHERM_THROT_LEVEL_MED
    TEGRA_SOCTHERM_THROT_LEVEL_HIGH, TEGRA_SOCTHERM_THROT_LEVEL_NONE
- cpu-throt-depth: Throttling depth of pulse skippers, it's the percentage
    throttling. This property is for Tegra124 or Tegra210.
- gpu-throt-level: This property is same as cpu-throt-level, it is used
    for gpu clock.
Optional properties:
- alarm-filter: Number of clocks to filter event. When the filter expires
   (which means the OC event has not occurred for a long time), the counter
   is cleared and filter is rearmed. Required for OCx.
- alarm-cnt-threshold: Event count threshold to raise interrupt,
    0-rise interrupt for every event. Required for OCx.
- polarity: Alarm polarity, 1-assert low, 0-assert high.
    Required for OCx.

* hw-trips
Required properties:
- sensor-groups : A sub-node which is a container of sensors, used to
    describe the HW trip points.

* sensors:
These node is used to describe the HW trip points info, named as
"cpu", "gpu", "mem", "pll".

Required properties:
- therm-temp : shutdown temperature, once the temperature of this
    sensor higher than the therm-temp, the system will be shutdown.

Optional properties:
- throt-temp : HW throttle temperature, once the temperature of this
    sensor higher then the throt-temp, the HW throttle will be triggered
    in soctherm.


Example :

	soctherm@0,700e2000 {
		compatible = "nvidia,tegra124-soctherm";
		reg = <0x700e2000 0x1000 /* 0: SOC_THERM reg_base */
			0x60006000 0x400 /* 1: T124: CAR reg_base */
			0x70040000 0x200>; /* 2: T132: CCROC reg_base */
		reg-names = "soctherm-reg", "car-reg", "ccroc-reg";
		interrupts = <GIC_SPI 48 IRQ_TYPE_LEVEL_HIGH>;
		clocks = <&tegra_car TEGRA124_CLK_TSENSOR>,
			<&tegra_car TEGRA124_CLK_SOC_THERM>;
		clock-names = "tsensor", "soctherm";
		resets = <&tegra_car 78>;
		reset-names = "soctherm";

		#thermal-sensor-cells = <1>;

		throttle-cfgs {
			heavy {
				alarm-filter = <5100000>;
				alarm-cnt-threshold = <0>;
				polarity = <1>; /* ACTIVE_LOW */
				priority = <100>;
				cpu_throt_level = <TEGRA_SOCTHERM_THROT_LEVEL_HIGH>;
			};
		};

		hw-trips {
			sensor-groups {
				cpu {
					therm-temp = <105000>;
					throt-temp = <101000>;
				};
			};
		};
	};

Example: referring to thermal sensors :

       thermal-zones {
                cpu {
                        polling-delay-passive = <1000>;
                        polling-delay = <1000>;

                        thermal-sensors =
                                <&soctherm TEGRA124_SOCTHERM_SENSOR_CPU>;
                };
	};
