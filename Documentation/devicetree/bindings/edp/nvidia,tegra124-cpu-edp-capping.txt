Tegra CPU EDP Management

Any technique for constraining peak current (or power) consumption of
a power rail constitutes EDP management. An EDP management technique
is "dynamic" if its operation depends on parameters which vary at runtime.

This document describes a binding for configuring the dynamic EDP
management algorithm commonly used to manage EDP on the VDD_CPU rail
of Tegra devices.

The algorithm dynamically limits CPU frequency as a function of
temperature, number of cores active, and which cluster is active. (The
algorithm assumes that VDD_CPU powers one or more CPU clusters which
run mutually exclusively). The algorithm computes the maximum
allowable frequency using

- the active cluster's voltage/frequency curve (queried at runtime)
- the VDD_CPU leakage (queried at runtime)
- the active cluster's CPU power model (expressed
     according to nvidia,tegra-ppm.txt)

Required properties:
- compatible: the value "nvidia,tegra124-cpu-edp-capping"
- nvidia,edp-limit: the EDP limit expressed in mA
- nvidia,tz: the related thermal zone device

Optional properties:
- the optional properties supported by binding nvidia,tegra-ppm.txt

Required per-cluster properties:
- the required properties from binding nvidia,tegra-ppm.txt
- nvidia,freq-step: the granularity in kHz of allowable clock frequencies

Example:

	cpu_edp {
		compatible = "nvidia,tegra124-cpu-edp-capping";
		nvidia,freq-step = <12750000>;
		nvidia,tegra-ppm-cdyn = <950000 1399000 2166000 3041000>;
		nvidia,tegra-ppm-leakage_weights = <450 670 870 1000>;
		nvidia,tegra-ppm-min_leakage = <30>;
		nvidia,tegra-ppm-leakage_coeffs = <
			  (-309609464) (197786326) (-40763150) (1613941)
			  .... // 60 additional values omitted for brevity
			>;
		nvidia,edp-limit = <14000>;
		nvidia,tz = <&cpu_therm>;
	};
